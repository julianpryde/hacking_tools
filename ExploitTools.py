# pylint: disable=wildcard-import, unused-wildcard-import, missing-module-docstring
# pylint: disable=missing-class-docstring, missing-function-docstring, no-else-return
# pylint: disable=redefined-builtin

from typing import List, AnyStr
from pwn import *

class ExploitTools:

    def __init__(self, image_base, exe):
        self.image_base = image_base
        self.exe = exe
        self.elf = ELF(exe)
        self.generator = cyclic_gen()
        self.word_size = 2  # bytes
        self.elf_arch = self.elf.get_machine_arch()
        self.register_size = 4 if self.elf_arch == 'amd64' else 2  # words per register

    def start(self, gdbscript: str, *a, **kw):
        print(f"args: {str(args)}")  # type: ignore[name-defined]

        #pylint: disable-next=no-member
        if args.GDB:  # type: ignore[name-defined]
            #pylint: disable-next=undefined-variable, line-too-long
            return gdb.debug([self.exe], gdbscript=gdbscript, api=True, *a, **kw)  # type: ignore[name-defined]
        else:
            return process([self.exe], *a, **kw)  # type: ignore[name-defined]

    def generate_padding(self, registers: int):
        offset = registers * self.register_size * self.word_size
        return self.generator.get(offset)
